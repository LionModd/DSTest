<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on DataStruggle</title>
    <link>/post/</link>
    <description>Recent content in Posts on DataStruggle</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 12 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automated Machine Learning to predict boxing match winners</title>
      <link>/post/2018-08-11-automated-machine-learning-to-predict-boxing-match-winners/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-08-11-automated-machine-learning-to-predict-boxing-match-winners/</guid>
      <description>Packages Usedlibrary(tidyverse) # Data preplibrary(h2o) # Automated machine learninglibrary(naniar) # Identifying missing datalibrary(funModeling) # Quick histograms for featureslibrary(Hmisc) # Statistical summarieslibrary(caret) # Confusion matricesI came across a dataset that peaked my interest in something I enjoy watching, boxing. The data has been scrapped from a boxing bout website with a large quantity of data available. Using this data we can try to predict winners of each bout with automated machine learning.</description>
    </item>
    
    <item>
      <title>Automatic data prep</title>
      <link>/post/2018-08-04-automatic-data-prep/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-08-04-automatic-data-prep/</guid>
      <description>Packages Usedlibrary(taskscheduleR)library(boxr)Data prep seems to be a common task required for anything involving data, something even as simple as renaming columns. Let’s say every Monday morning you have to pull a report and manipulate it, why not automate this so you don’t have to lose 20 minutes every Monday? I’ve been thinking recently how to automate the reports being pulled and then using R to prep this data and then following on from this, have data vizualisation auto refresh the data.</description>
    </item>
    
    <item>
      <title>Logistic Regression for predicting bike purchasing</title>
      <link>/post/2018-07-09-logistic-regression/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-09-logistic-regression/</guid>
      <description>Packages Usedlibrary(tidyverse)library(caTools)library(kableExtra)The purpose of this exercise is to implement logistic regression on some data. The data used is looking at ages and salaries and identifying if the person purchased a particular item, lets say it’s a bike. Using this data we can predict whether someone will purchase a bike based upon age and salary. Purchasing a bike is good. I know what you’re thinking, this can be applied to the real world…</description>
    </item>
    
    <item>
      <title>Multiple Linear Regression</title>
      <link>/post/2018-07-01-implementing-linear-regression-part2/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-01-implementing-linear-regression-part2/</guid>
      <description>Packages usedlibrary(tidyverse)library(caTools)The extension of the previous post will be adding in more features into the pastures dataset to see if we can predict rent.grassy better than just using one feature (rent.arable). We’ll use linear regression again.
Aim: find multiple features that can be used to predict the dependent variableCaveat: it’s a small dataset (67 rows), this is more of an experimentJumping straight into the data prep we’ll rename columns, pull out the features we want and split the data into test and training sets.</description>
    </item>
    
    <item>
      <title>Implementing Linear Regression</title>
      <link>/post/2018-06-28-implementing-linear-regression/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-28-implementing-linear-regression/</guid>
      <description>Packages usedlibrary(tidyverse)library(caTools)I’ve found a dataset online to practice the method of linear regression on involving data regarding pasture rent in areas of Minnesota. The columns are
IndexRent per arable acre ($)Milk cows per square mileDifference between pasture and arable landRental price per grassy acrewith rental price per grassy acre being the dependent variable.Aim: find one feature that can be used to predict the dependent variableFirst we’ll do some preparation of the data, renaming of columns.</description>
    </item>
    
    <item>
      <title>Tibbles</title>
      <link>/post/2018-06-19-tibbles-vs-data-frames/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-19-tibbles-vs-data-frames/</guid>
      <description>Packages usedlibrary(tidyverse)library(nycflights13)I’ve never used tibbles that much and I don’t know why, only data frames. Data frames to me are rows of data. I’m going to see what the difference is between tibbles and data frames and hopefully add to the Rsenal. Tibbles are under the tidyverse package. Now onto the tibbles.
a &amp;lt;- tibble(x = 1:3,y = c(&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;),z = x ^ 2)a## # A tibble: 3 x 3## x y z## &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;## 1 1 A 1## 2 2 B 4## 3 3 C 9Compared to a data frame I can see that the types are being displayed.</description>
    </item>
    
    <item>
      <title>Exploring/looking at missing data</title>
      <link>/post/2018-06-18-looking-at-missing-data/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-18-looking-at-missing-data/</guid>
      <description>Packages usedlibrary(naniar)library(nycflights13)library(tidyverse)library(UpSetR)library(kableExtra)Missing data can skew results and cause problems but if we can come up with a suitable method(s) to rectify it we can include it (depending on the problem). But maybe we want to get an overview of the missing data and possibly identify patterns of missing data e.g. if column A is missing then so is column B.
Visualising missing dataThe UpSetR package is fantastic.</description>
    </item>
    
    <item>
      <title>Transforming data</title>
      <link>/post/2018-06-17-transforming-data/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-17-transforming-data/</guid>
      <description>Time to tackle some basic data transformations. Without this no clever analysis can happen. Packages usedlibrary(tidyverse)I’ll use the diamonds dataset in Rstudio to experiment with techniques. Excel’s Power Query uses steps for each transformation which seems very similar to the idea of “piping” the data in the tidyverse package. I think of adding a step in Power Query as adding another piece of the pipe in R.</description>
    </item>
    
  </channel>
</rss>